services:
  # Service 1 - API Gateway
  api_gateway:
    build: .
    command: npm run start:gateway
    container_name: api_gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - USER_SERVICE_URL=http://user_service:3001
      - ORDER_SERVICE_URL=http://order_service:3002
    networks:
      - cassandra_net
    depends_on:
      user_service:
        condition: service_healthy
      order_service:
        condition: service_healthy
    restart: always

  # Service 2 - User Service
  user_service:
    build: .
    command: npm run start:user
    container_name: user_service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
    networks:
      - cassandra_net
    depends_on:
      cassandra1:
        condition: service_healthy
      cassandra2:
        condition: service_healthy
      cassandra3:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always

  # Service 3 - Order Service
  order_service:
    build: .
    command: npm run start:order
    container_name: order_service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
    networks:
      - cassandra_net
    depends_on:
      cassandra1:
        condition: service_healthy
      cassandra2:
        condition: service_healthy
      cassandra3:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always

  # Cassandra Cluster
  cassandra1:
    image: cassandra:4.1
    container_name: cassandra1
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=TestCluster
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
    volumes:
      - cassandra1_data:/var/lib/cassandra
    networks:
      - cassandra_net
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra", "-e describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always

  cassandra2:
    image: cassandra:4.1
    container_name: cassandra2
    ports:
      - "9043:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=TestCluster
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
    volumes:
      - cassandra2_data:/var/lib/cassandra
    networks:
      - cassandra_net
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra", "-e describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always

  cassandra3:
    image: cassandra:4.1
    container_name: cassandra3
    ports:
      - "9044:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=TestCluster
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
    volumes:
      - cassandra3_data:/var/lib/cassandra
    networks:
      - cassandra_net
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra", "-e describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always

networks:
  cassandra_net:
    name: cassandra_net
    driver: bridge

volumes:
  cassandra1_data:
  cassandra2_data:
  cassandra3_data: 