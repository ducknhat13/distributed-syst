/**
 * =============================================================================
 * CASSANDRA DATABASE CONNECTION UTILITY
 * =============================================================================
 * 
 * File n√†y ch·ª©a t·∫•t c·∫£ logic k·∫øt n·ªëi v√† qu·∫£n l√Ω Apache Cassandra database
 * M·ª•c ƒë√≠ch: T√°i s·ª≠ d·ª•ng code, d·ªÖ maintain v√† monitor connection
 * 
 * Author: Distributed System Team
 * Version: 1.0.0
 * =============================================================================
 */

const { Client } = require('cassandra-driver');

/**
 * H√†m delay - T·∫°m d·ª´ng th·ª±c thi trong m·ªôt kho·∫£ng th·ªùi gian
 * @param {number} ms - S·ªë milliseconds ƒë·ªÉ delay
 * @returns {Promise} Promise resolve sau th·ªùi gian delay
 */
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

/**
 * =============================================================================
 * CASSANDRA CLIENT CONFIGURATION
 * =============================================================================
 */

/**
 * C·∫•u h√¨nh Cassandra Client v·ªõi 3-node cluster setup
 * - contactPoints: Danh s√°ch c√°c Cassandra nodes ƒë·ªÉ k·∫øt n·ªëi
 * - localDataCenter: Data center m√† client thu·ªôc v·ªÅ (quan tr·ªçng cho routing)
 * - protocolOptions: C·∫•u h√¨nh port k·∫øt n·ªëi
 */
const client = new Client({
    // Danh s√°ch 3 Cassandra nodes trong cluster
    contactPoints: [
        'cassandra1',    // Node 1 - Port 9042 (internal)
        'cassandra2',    // Node 2 - Port 9043 (external mapping)
        'cassandra3'     // Node 3 - Port 9044 (external mapping)
    ],
    
    // Data center ƒë·ªÉ client bi·∫øt routing preference
    localDataCenter: 'datacenter1',
    
    // C·∫•u h√¨nh protocol connection
    protocolOptions: {
        port: 9042  // Default Cassandra port
    },
    
    // C·∫•u h√¨nh retry policy cho resilience
    policies: {
        retry: {
            // Retry l·∫°i khi c√≥ l·ªói t·∫°m th·ªùi
            retryDelay: 1000,
            maxRetryCount: 3
        }
    }
});

/**
 * =============================================================================
 * HEALTH CHECK FUNCTIONS
 * =============================================================================
 */

/**
 * Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi Cassandra cluster
 * H√†m n√†y th·ª±c hi·ªán health check b·∫±ng c√°ch query system table
 * 
 * @returns {Promise<boolean>} true n·∫øu cluster s·∫µn s√†ng, false n·∫øu kh√¥ng
 */
async function checkCassandraHealth() {
    try {
        // Query system.local ƒë·ªÉ ki·ªÉm tra connectivity
        const result = await client.execute('SELECT now() FROM system.local');
        console.log('‚úÖ Cassandra cluster health check passed:', result.rows[0]);
        return true;
    } catch (error) {
        console.error('‚ùå Cassandra cluster health check failed:', error.message);
        return false;
    }
}

/**
 * Ki·ªÉm tra tr·∫°ng th√°i Cassandra cluster v·ªõi retry mechanism
 * H√†m n√†y s·∫Ω th·ª≠ k·∫øt n·ªëi nhi·ªÅu l·∫ßn tr∆∞·ªõc khi b√°o l·ªói
 * 
 * @param {number} maxRetries - S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa (default: 10)
 * @param {number} retryInterval - Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn th·ª≠ (default: 5000ms)
 * @returns {Promise<boolean>} true n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
 */
async function waitForCassandraReady(maxRetries = 10, retryInterval = 5000) {
    console.log('üîÑ ƒêang ki·ªÉm tra tr·∫°ng th√°i Cassandra cluster...');
    
    let retries = maxRetries;
    while (retries > 0) {
        try {
            // Th·ª±c hi·ªán health check
            const isHealthy = await checkCassandraHealth();
            if (isHealthy) {
                console.log('üéâ Cassandra cluster ƒë√£ s·∫µn s√†ng!');
                return true;
            }
        } catch (error) {
            console.log(`‚è≥ Cassandra ch∆∞a s·∫µn s√†ng, th·ª≠ l·∫°i... (${maxRetries - retries + 1}/${maxRetries})`);
            console.log(`üìù L·ªói: ${error.message}`);
        }
        
        retries--;
        if (retries === 0) {
            console.error('üí• Cassandra cluster kh√¥ng s·∫µn s√†ng sau', maxRetries, 'l·∫ßn th·ª≠');
            return false;
        }
        
        // ƒê·ª£i tr∆∞·ªõc khi th·ª≠ l·∫°i
        console.log(`‚è∞ ƒê·ª£i ${retryInterval/1000}s tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
        await delay(retryInterval);
    }
    
    return false;
}

/**
 * =============================================================================
 * DATABASE INITIALIZATION FUNCTIONS
 * =============================================================================
 */

/**
 * T·∫°o keyspace cho application v·ªõi replication factor = 3
 * Keyspace l√† namespace cao nh·∫•t trong Cassandra (t∆∞∆°ng ƒë∆∞∆°ng database trong RDBMS)
 * 
 * @param {string} keyspaceName - T√™n keyspace c·∫ßn t·∫°o
 * @param {number} replicationFactor - S·ªë replica cho m·ªói piece of data
 * @returns {Promise<boolean>} true n·∫øu t·∫°o th√†nh c√¥ng
 */
async function createKeyspace(keyspaceName = 'test_keyspace', replicationFactor = 3) {
    try {
        console.log('üèóÔ∏è  T·∫°o keyspace:', keyspaceName);
        
        // CQL command ƒë·ªÉ t·∫°o keyspace v·ªõi SimpleStrategy
        // SimpleStrategy: Replication strategy ƒë∆°n gi·∫£n, ph√π h·ª£p cho single datacenter
        const query = `
            CREATE KEYSPACE IF NOT EXISTS ${keyspaceName}
            WITH replication = {
                'class': 'SimpleStrategy', 
                'replication_factor': ${replicationFactor}
            }
        `;
        
        await client.execute(query);
        console.log('‚úÖ Keyspace', keyspaceName, 'ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi replication factor:', replicationFactor);
        
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ keyspace ƒë∆∞·ª£c propagate qua cluster
        await delay(2000);
        return true;
        
    } catch (error) {
        console.error('‚ùå L·ªói t·∫°o keyspace:', error.message);
        throw error;
    }
}

/**
 * K·∫øt n·ªëi t·ªõi keyspace c·ª• th·ªÉ
 * Sau khi t·∫°o keyspace, c·∫ßn USE ƒë·ªÉ switch context
 * 
 * @param {string} keyspaceName - T√™n keyspace ƒë·ªÉ k·∫øt n·ªëi
 * @returns {Promise<boolean>} true n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
 */
async function useKeyspace(keyspaceName = 'test_keyspace') {
    try {
        console.log('üîó K·∫øt n·ªëi t·ªõi keyspace:', keyspaceName);
        
        await client.execute(`USE ${keyspaceName}`);
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi keyspace:', keyspaceName);
        return true;
        
    } catch (error) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi keyspace:', error.message);
        throw error;
    }
}

/**
 * T·∫°o table users v·ªõi schema ƒë·ªãnh nghƒ©a tr∆∞·ªõc
 * 
 * @returns {Promise<boolean>} true n·∫øu t·∫°o table th√†nh c√¥ng
 */
async function createUsersTable() {
    try {
        console.log('üìã T·∫°o table users...');
        
        const query = `
            CREATE TABLE IF NOT EXISTS users (
                id text PRIMARY KEY,        -- Primary key: Unique identifier
                name text,                  -- T√™n ng∆∞·ªùi d√πng
                email text,                 -- Email ng∆∞·ªùi d√πng
                created_at timestamp,       -- Th·ªùi gian t·∫°o (th√™m v√†o)
                updated_at timestamp        -- Th·ªùi gian c·∫≠p nh·∫≠t (th√™m v√†o)
            )
        `;
        
        await client.execute(query);
        console.log('‚úÖ Table users ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng');
        return true;
        
    } catch (error) {
        console.error('‚ùå L·ªói t·∫°o table users:', error.message);
        throw error;
    }
}

/**
 * T·∫°o table orders v·ªõi schema ƒë·ªãnh nghƒ©a tr∆∞·ªõc
 * 
 * @returns {Promise<boolean>} true n·∫øu t·∫°o table th√†nh c√¥ng
 */
async function createOrdersTable() {
    try {
        console.log('üìã T·∫°o table orders...');
        
        const query = `
            CREATE TABLE IF NOT EXISTS orders (
                id text PRIMARY KEY,        -- Primary key: Unique identifier
                user_id text,              -- Foreign key reference t·ªõi users
                items text,                -- JSON string ch·ª©a danh s√°ch items
                total_amount decimal,      -- T·ªïng ti·ªÅn
                status text,               -- Tr·∫°ng th√°i ƒë∆°n h√†ng (th√™m v√†o)
                created_at timestamp,      -- Th·ªùi gian t·∫°o (th√™m v√†o)
                updated_at timestamp       -- Th·ªùi gian c·∫≠p nh·∫≠t (th√™m v√†o)
            )
        `;
        
        await client.execute(query);
        console.log('‚úÖ Table orders ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng');
        return true;
        
    } catch (error) {
        console.error('‚ùå L·ªói t·∫°o table orders:', error.message);
        throw error;
    }
}

/**
 * =============================================================================
 * MAIN INITIALIZATION FUNCTION
 * =============================================================================
 */

/**
 * Kh·ªüi t·∫°o to√†n b·ªô database schema v√† k·∫øt n·ªëi
 * H√†m ch√≠nh ƒë·ªÉ setup database t·ª´ ƒë·∫ßu
 * 
 * @param {number} maxRetries - S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa cho vi·ªác initialization
 * @returns {Promise<boolean>} true n·∫øu kh·ªüi t·∫°o th√†nh c√¥ng
 */
async function initializeDatabase(maxRetries = 5) {
    console.log('üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o Cassandra database...');
    
    // B∆∞·ªõc 1: ƒê·ª£i Cassandra cluster s·∫µn s√†ng
    const isClusterReady = await waitForCassandraReady();
    if (!isClusterReady) {
        throw new Error('Cassandra cluster kh√¥ng s·∫µn s√†ng ƒë·ªÉ kh·ªüi t·∫°o database');
    }
    
    let retries = maxRetries;
    while (retries > 0) {
        try {
            console.log(`üìù L·∫ßn th·ª≠ kh·ªüi t·∫°o database: ${maxRetries - retries + 1}/${maxRetries}`);
            
            // B∆∞·ªõc 2: T·∫°o keyspace
            await createKeyspace('test_keyspace', 3);
            
            // B∆∞·ªõc 3: K·∫øt n·ªëi t·ªõi keyspace
            await useKeyspace('test_keyspace');
            
            // B∆∞·ªõc 4: T·∫°o tables
            await createUsersTable();
            await createOrdersTable();
            
            console.log('üéâ Database ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!');
            console.log('üìä Schema summary:');
            console.log('   - Keyspace: test_keyspace (RF=3)');
            console.log('   - Tables: users, orders');
            console.log('   - Cluster: 3 nodes (cassandra1, cassandra2, cassandra3)');
            
            return true;
            
        } catch (error) {
            console.error(`‚ùå L·ªói kh·ªüi t·∫°o database (l·∫ßn th·ª≠ ${maxRetries - retries + 1}):`, error.message);
            retries--;
            
            if (retries === 0) {
                console.error('üí• Kh√¥ng th·ªÉ kh·ªüi t·∫°o database sau', maxRetries, 'l·∫ßn th·ª≠');
                throw error;
            }
            
            // ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
            console.log('‚è∞ ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...');
            await delay(5000);
        }
    }
    
    return false;
}

/**
 * =============================================================================
 * DATABASE OPERATION HELPERS
 * =============================================================================
 */

/**
 * Th·ª±c thi prepared statement m·ªôt c√°ch an to√†n
 * Prepared statements gi√∫p prevent injection v√† improve performance
 * 
 * @param {string} query - CQL query string
 * @param {Array} params - Parameters cho query
 * @param {Object} options - Options cho execution
 * @returns {Promise<Object>} Query result
 */
async function executeQuery(query, params = [], options = { prepare: true }) {
    try {
        console.log('üîç Executing query:', query);
        console.log('üìù Parameters:', params);
        
        const result = await client.execute(query, params, options);
        console.log('‚úÖ Query executed successfully, rows returned:', result.rows.length);
        
        return result;
        
    } catch (error) {
        console.error('‚ùå Query execution failed:', error.message);
        console.error('üìù Query:', query);
        console.error('üìù Parameters:', params);
        throw error;
    }
}

/**
 * ƒê√≥ng k·∫øt n·ªëi Cassandra client
 * G·ªçi h√†m n√†y khi shutdown application
 */
async function closeConnection() {
    try {
        console.log('üîí ƒê√≥ng k·∫øt n·ªëi Cassandra...');
        await client.shutdown();
        console.log('‚úÖ K·∫øt n·ªëi Cassandra ƒë√£ ƒë∆∞·ª£c ƒë√≥ng');
    } catch (error) {
        console.error('‚ùå L·ªói ƒë√≥ng k·∫øt n·ªëi:', error.message);
    }
}

/**
 * =============================================================================
 * EXPORTS
 * =============================================================================
 */

module.exports = {
    // Client instance
    client,
    
    // Health check functions
    checkCassandraHealth,
    waitForCassandraReady,
    
    // Database initialization
    initializeDatabase,
    createKeyspace,
    useKeyspace,
    createUsersTable,
    createOrdersTable,
    
    // Query helpers
    executeQuery,
    closeConnection,
    
    // Utility
    delay
}; 